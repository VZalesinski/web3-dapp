import Head from 'next/head'
import {
	AdminControls,
	CountdownTimer,
	Header,
	Loader,
	Login
} from '@/components/index'
import {
	useAddress,
	useAccount,
	useContract,
	useMetamask,
	useDisconnect,
	useContractRead,
	useContractWrite,
	ConnectWallet
} from '@thirdweb-dev/react'
import { useEffect, useState } from 'react'
import { ethers } from 'ethers'
import { currency } from '@/utils/constants'
import toast from 'react-hot-toast'
import Marquee from 'react-fast-marquee'

export default function Home() {
	const [quantity, setQuantity] = useState(1)
	const [userTickets, setUserTickets] = useState(0)

	const address = useAddress()
	const { contract, isLoading } = useContract(
		process.env.NEXT_PUBLIC_LOTTERY_CONTRACT_ADDRESS
	)

	const { data: remainingTickets } = useContractRead(
		contract,
		'RemainingTickets'
	)

	const { data: currentWinningReward } = useContractRead(
		contract,
		'CurrentWinningReward'
	)

	const { data: ticketCommission } = useContractRead(
		contract,
		'ticketCommission'
	)

	const { data: tickets } = useContractRead(contract, 'getTickets')

	const { data: expiration } = useContractRead(contract, 'expiration')

	const { data: ticketPrice } = useContractRead(contract, 'ticketPrice')

	const { data: lastWinner } = useContractRead(contract, 'lastWinner')

	const { data: isLotteryOperator } = useContractRead(
		contract,
		'lotteryOperator'
	)

	const { data: lastWinnerAmount } = useContractRead(
		contract,
		'lastWinnerAmount'
	)

	const { data: winnings } = useContractRead(
		contract,
		'getWinningsForAddress',
		address
	)

	const { mutateAsync: BuyTickets } = useContractWrite(contract, 'BuyTickets')

	const { mutateAsync: WithdrawWinnings } = useContractWrite(
		contract,
		'WithdrawWinnings'
	)

	useEffect(() => {
		if (!tickets) return

		const totalTickets: string[] = tickets

		const noOfUserTickets = totalTickets.reduce(
			(total, ticketAddress) => (ticketAddress === address ? total + 1 : total),
			0
		)

		setUserTickets(noOfUserTickets)
	}, [tickets, address])

	const handleButton = async () => {
		if (!ticketPrice) return

		const notification = toast.loading('Buying your tickets...')

		try {
			const data = await BuyTickets([
				{
					value: ethers.utils.parseEther(
						(
							Number(ethers.utils.formatEther(ticketPrice)) * quantity
						).toString()
					)
				}
			])

			toast.success('Tickets purchased success', { id: notification })
		} catch (error) {
			toast.error('Whoops something went wrong!', { id: notification })
		}
	}

	const onWithdrawWinnigs = async () => {
		const notification = toast.loading('Withdrawing winnigs...')

		try {
			const data = await WithdrawWinnings([{}])

			toast.success('Winnings withdraw seccessefully!', {
				id: notification
			})
		} catch (error) {
			toast.error('Whoops something went wrong!', {
				id: notification
			})
		}
	}

	if (isLoading) return <Loader />

	if (!address) return <Login />

	return (
		<div className='bg-[#091B18] min-h-screen flex flex-col items-center'>
			<Head>
				<title>Web3 Dapp</title>
				<meta name='description' content='Generated by create next app' />
				<meta name='viewport' content='width=device-width, initial-scale=1' />
			</Head>

			<Header />

			<Marquee className='bg-[#0A1F1C] p-5 mb-5' gradient={false} speed={100}>
				<div className='flex space-x-2 mx-10'>
					<h4 className='text-white font-bold'>Last Winner: {lastWinner}</h4>
					<h4 className='text-white font-bold'>
						Previous Winnings:{' '}
						{lastWinnerAmount &&
							ethers.utils.formatEther(lastWinnerAmount?.toString())}{' '}
						{currency}
					</h4>
				</div>
			</Marquee>

			{isLotteryOperator === address && (
				<div className='flex justify-center'>
					<AdminControls />
				</div>
			)}

			{winnings > 0 && (
				<div>
					<button
						className='p-5 bg-gradient-to-b from-orange-500 to-emerald-600 animate-pulse text-center rounded-xl w-full'
						onClick={onWithdrawWinnigs}
					>
						<p className='font-bold'>Winner Winner Chicken Dinner!</p>
						<p>
							Total Winnigs: {ethers.utils.formatEther(winnings.toString())}{' '}
							{currency}
						</p>
						<br />
						<p className='font-semibold'>Click here to withdraw</p>
					</button>
				</div>
			)}

			<div className='space-y-5 md:space-y-0 m-5 md:flex md:flex-row items-start justify md:space-x-5'>
				<div className='stats-container'>
					<h3 className='text-2xl text-white font-semibold text-center'>
						The Next Draw
					</h3>

					<div className='flex justify-between p-2 gap-2'>
						<div className='stats'>
							<h3 className='text-sm'>Total Pool</h3>
							<p className='text-lg'>
								{currentWinningReward &&
									ethers.utils.formatEther(
										currentWinningReward.toString()
									)}{' '}
								{currency}
							</p>
						</div>

						<div className='stats'>
							<h3 className='text-sm'>Tickets Remaining</h3>
							<p className='text-lg'>{remainingTickets?.toNumber()}</p>
						</div>
					</div>

					<div className='mt-5 mb-3'>
						<CountdownTimer />
					</div>
				</div>

				<div className='stats-container space-y-2'>
					<div className='stats-container'>
						<div className='flex justify-between items-center text-white pb-2'>
							<h3 className='text-sm'>Price Per Ticket</h3>
							<p className='text-lg'>
								{ticketPrice &&
									ethers.utils.formatEther(ticketPrice.toString())}{' '}
								{currency}
							</p>
						</div>

						<div className='flex text-white uppercase items-center space-x-2 bg-[#091B18] border-[#004337] border p-4'>
							<p>Tickets</p>
							<input
								type='number'
								className='flex w-full bg-transparent text-right outline-none'
								placeholder='set value'
								min={1}
								max={10}
								value={quantity}
								onChange={e => setQuantity(Number(e.target.value))}
							/>
						</div>

						<div className='space-y-2 mt-5'>
							<div className='flex items-center justify-between text-emerald-300 text-sm italic font-extrabold'>
								<p>Total cost of tickets</p>
								<p>
									{ticketPrice &&
										Number(ethers.utils.formatEther(ticketPrice.toString())) *
											quantity}{' '}
									{currency}
								</p>
							</div>

							<div className='flex items-center justify-between text-emerald-300 text-xs italic'>
								<p>Service fees</p>
								<p>
									{ticketCommission &&
										ethers.utils.formatEther(ticketCommission?.toString())}{' '}
									{currency}
								</p>
							</div>

							<div className='flex items-center justify-between text-emerald-300 text-xs italic'>
								<p>+ Network Fees</p>
								<p>TBC</p>
							</div>
						</div>

						<button
							onClick={handleButton}
							disabled={
								expiration?.toString() < Date.now().toString() ||
								remainingTickets?.toNumber() === 0
							}
							className='mt-5 w-full bg-gradient-to-br from-orange-500 to-emerald-600 px-10 py-5 rounded-md text-white shadow-xl disabled:from-gray-600 disabled:to-gray-600 disabled:cursor-not-allowed disabled:text-gray-100'
						>
							Buy {quantity} tickets for{' '}
							{ticketPrice &&
								Number(ethers.utils.formatEther(ticketPrice.toString())) *
									quantity}{' '}
							{currency}
						</button>
					</div>

					{userTickets > 0 && (
						<div className='stats'>
							<p className='mb-2 text-lg'>
								You have {userTickets} Tickets in this draw
							</p>

							<div className='flex max-w-sm flex-wrap gap-2'>
								{Array(userTickets)
									.fill('')
									.map((_, index) => (
										<p
											className='text-emerald-300 h-20 w-12 bg-emerald-500/30 rounded-lg flex flex-shrink-0 items-center justify-center text-xs italic'
											key={index}
										>
											{index + 1}
										</p>
									))}
							</div>
						</div>
					)}
				</div>
			</div>

			<div></div>
		</div>
	)
}
